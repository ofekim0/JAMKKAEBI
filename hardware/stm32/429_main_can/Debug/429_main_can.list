
429_main_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031d4  080031d4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080031d4  080031d4  000041d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031dc  080031dc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031dc  080031dc  000041dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031e0  080031e0  000041e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000114  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a54f  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aea  00000000  00000000  0000f58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a8  00000000  00000000  00011078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069d  00000000  00000000  00011920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000223f3  00000000  00000000  00011fbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a633  00000000  00000000  000343b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0a7f  00000000  00000000  0003e9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010f462  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022dc  00000000  00000000  0010f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00111784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080031a4 	.word	0x080031a4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080031a4 	.word	0x080031a4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Tx_msg>:
CAN_TxHeaderTypeDef Tx4Header;
uint8_t Rx_data[8];
uint32_t TxMailbox;


void Tx_msg(uint8_t tar, uint8_t cont, uint8_t status){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
 80004e6:	460b      	mov	r3, r1
 80004e8:	71bb      	strb	r3, [r7, #6]
 80004ea:	4613      	mov	r3, r2
 80004ec:	717b      	strb	r3, [r7, #5]
	uint8_t Tx_data[8];
	if(status == 0){
 80004ee:	797b      	ldrb	r3, [r7, #5]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d144      	bne.n	800057e <Tx_msg+0xa2>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80004f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004f8:	4834      	ldr	r0, [pc, #208]	@ (80005cc <Tx_msg+0xf0>)
 80004fa:	f001 f98c 	bl	8001816 <HAL_GPIO_TogglePin>
		if(tar == 0){ // vibe
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d109      	bne.n	8000518 <Tx_msg+0x3c>
			Tx_data[0] = cont;
 8000504:	79bb      	ldrb	r3, [r7, #6]
 8000506:	723b      	strb	r3, [r7, #8]
			HAL_CAN_AddTxMessage(&hcan1, &Tx0Header, Tx_data, &TxMailbox);
 8000508:	f107 0208 	add.w	r2, r7, #8
 800050c:	4b30      	ldr	r3, [pc, #192]	@ (80005d0 <Tx_msg+0xf4>)
 800050e:	4931      	ldr	r1, [pc, #196]	@ (80005d4 <Tx_msg+0xf8>)
 8000510:	4831      	ldr	r0, [pc, #196]	@ (80005d8 <Tx_msg+0xfc>)
 8000512:	f000 fd46 	bl	8000fa2 <HAL_CAN_AddTxMessage>
		else if(Rx_data[1] == 0){
			Tx_data[0] = 0;
			HAL_CAN_AddTxMessage(&hcan1, &Tx4Header, Tx_data, &TxMailbox);
		}
	}
}
 8000516:	e055      	b.n	80005c4 <Tx_msg+0xe8>
		else if(tar == 1){ // LED Control
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d115      	bne.n	800054a <Tx_msg+0x6e>
			Tx_data[0] = cont;       // Control Rx_Data[1] 0 -> off, 1 -> on, 3 -> brightness, 4 -> change-
 800051e:	79bb      	ldrb	r3, [r7, #6]
 8000520:	723b      	strb	r3, [r7, #8]
			Tx_data[1] = Rx_data[2]; // RED
 8000522:	4b2e      	ldr	r3, [pc, #184]	@ (80005dc <Tx_msg+0x100>)
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	727b      	strb	r3, [r7, #9]
			Tx_data[2] = Rx_data[3]; // GREEN
 8000528:	4b2c      	ldr	r3, [pc, #176]	@ (80005dc <Tx_msg+0x100>)
 800052a:	78db      	ldrb	r3, [r3, #3]
 800052c:	72bb      	strb	r3, [r7, #10]
			Tx_data[3] = Rx_data[4]; // BLUE
 800052e:	4b2b      	ldr	r3, [pc, #172]	@ (80005dc <Tx_msg+0x100>)
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	72fb      	strb	r3, [r7, #11]
			Tx_data[4] = Rx_data[5]; // Brightness
 8000534:	4b29      	ldr	r3, [pc, #164]	@ (80005dc <Tx_msg+0x100>)
 8000536:	795b      	ldrb	r3, [r3, #5]
 8000538:	733b      	strb	r3, [r7, #12]
			HAL_CAN_AddTxMessage(&hcan1, &Tx1Header, Tx_data, &TxMailbox);
 800053a:	f107 0208 	add.w	r2, r7, #8
 800053e:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <Tx_msg+0xf4>)
 8000540:	4927      	ldr	r1, [pc, #156]	@ (80005e0 <Tx_msg+0x104>)
 8000542:	4825      	ldr	r0, [pc, #148]	@ (80005d8 <Tx_msg+0xfc>)
 8000544:	f000 fd2d 	bl	8000fa2 <HAL_CAN_AddTxMessage>
}
 8000548:	e03c      	b.n	80005c4 <Tx_msg+0xe8>
		else if(tar == 2){ // linear
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d109      	bne.n	8000564 <Tx_msg+0x88>
			Tx_data[0] = cont;
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	723b      	strb	r3, [r7, #8]
			HAL_CAN_AddTxMessage(&hcan1, &Tx2Header, Tx_data, &TxMailbox);
 8000554:	f107 0208 	add.w	r2, r7, #8
 8000558:	4b1d      	ldr	r3, [pc, #116]	@ (80005d0 <Tx_msg+0xf4>)
 800055a:	4922      	ldr	r1, [pc, #136]	@ (80005e4 <Tx_msg+0x108>)
 800055c:	481e      	ldr	r0, [pc, #120]	@ (80005d8 <Tx_msg+0xfc>)
 800055e:	f000 fd20 	bl	8000fa2 <HAL_CAN_AddTxMessage>
}
 8000562:	e02f      	b.n	80005c4 <Tx_msg+0xe8>
		else if(tar == 3){ // motor
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d12c      	bne.n	80005c4 <Tx_msg+0xe8>
			Tx_data[0] = cont;
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	723b      	strb	r3, [r7, #8]
			HAL_CAN_AddTxMessage(&hcan1, &Tx3Header, Tx_data, &TxMailbox);
 800056e:	f107 0208 	add.w	r2, r7, #8
 8000572:	4b17      	ldr	r3, [pc, #92]	@ (80005d0 <Tx_msg+0xf4>)
 8000574:	491c      	ldr	r1, [pc, #112]	@ (80005e8 <Tx_msg+0x10c>)
 8000576:	4818      	ldr	r0, [pc, #96]	@ (80005d8 <Tx_msg+0xfc>)
 8000578:	f000 fd13 	bl	8000fa2 <HAL_CAN_AddTxMessage>
}
 800057c:	e022      	b.n	80005c4 <Tx_msg+0xe8>
	else if(status == 1){ //auto
 800057e:	797b      	ldrb	r3, [r7, #5]
 8000580:	2b01      	cmp	r3, #1
 8000582:	d11f      	bne.n	80005c4 <Tx_msg+0xe8>
		if(Rx_data[1]==1){
 8000584:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <Tx_msg+0x100>)
 8000586:	785b      	ldrb	r3, [r3, #1]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d10e      	bne.n	80005aa <Tx_msg+0xce>
			Tx_data[0] = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	723b      	strb	r3, [r7, #8]
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000590:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000594:	4815      	ldr	r0, [pc, #84]	@ (80005ec <Tx_msg+0x110>)
 8000596:	f001 f93e 	bl	8001816 <HAL_GPIO_TogglePin>
			HAL_CAN_AddTxMessage(&hcan1, &Tx4Header, Tx_data, &TxMailbox);
 800059a:	f107 0208 	add.w	r2, r7, #8
 800059e:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <Tx_msg+0xf4>)
 80005a0:	4913      	ldr	r1, [pc, #76]	@ (80005f0 <Tx_msg+0x114>)
 80005a2:	480d      	ldr	r0, [pc, #52]	@ (80005d8 <Tx_msg+0xfc>)
 80005a4:	f000 fcfd 	bl	8000fa2 <HAL_CAN_AddTxMessage>
}
 80005a8:	e00c      	b.n	80005c4 <Tx_msg+0xe8>
		else if(Rx_data[1] == 0){
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <Tx_msg+0x100>)
 80005ac:	785b      	ldrb	r3, [r3, #1]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d108      	bne.n	80005c4 <Tx_msg+0xe8>
			Tx_data[0] = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	723b      	strb	r3, [r7, #8]
			HAL_CAN_AddTxMessage(&hcan1, &Tx4Header, Tx_data, &TxMailbox);
 80005b6:	f107 0208 	add.w	r2, r7, #8
 80005ba:	4b05      	ldr	r3, [pc, #20]	@ (80005d0 <Tx_msg+0xf4>)
 80005bc:	490c      	ldr	r1, [pc, #48]	@ (80005f0 <Tx_msg+0x114>)
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <Tx_msg+0xfc>)
 80005c0:	f000 fcef 	bl	8000fa2 <HAL_CAN_AddTxMessage>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020800 	.word	0x40020800
 80005d0:	20000118 	.word	0x20000118
 80005d4:	20000098 	.word	0x20000098
 80005d8:	20000028 	.word	0x20000028
 80005dc:	20000110 	.word	0x20000110
 80005e0:	200000b0 	.word	0x200000b0
 80005e4:	200000c8 	.word	0x200000c8
 80005e8:	200000e0 	.word	0x200000e0
 80005ec:	40021800 	.word	0x40021800
 80005f0:	200000f8 	.word	0x200000f8

080005f4 <HAL_UART_RxCpltCallback>:
//	HAL_CAN_AddTxMessage(&hcan1, &Tx4Header, Tx_data, &TxMailbox);
//	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
//}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <HAL_UART_RxCpltCallback+0x48>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d116      	bne.n	8000634 <HAL_UART_RxCpltCallback+0x40>
    	if(Rx_data[6] == 1)
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <HAL_UART_RxCpltCallback+0x4c>)
 8000608:	799b      	ldrb	r3, [r3, #6]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d104      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x24>
    		HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800060e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000612:	480c      	ldr	r0, [pc, #48]	@ (8000644 <HAL_UART_RxCpltCallback+0x50>)
 8000614:	f001 f8ff 	bl	8001816 <HAL_GPIO_TogglePin>
        Tx_msg(Rx_data[0], Rx_data[1], Rx_data[6]);
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <HAL_UART_RxCpltCallback+0x4c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4a08      	ldr	r2, [pc, #32]	@ (8000640 <HAL_UART_RxCpltCallback+0x4c>)
 800061e:	7851      	ldrb	r1, [r2, #1]
 8000620:	4a07      	ldr	r2, [pc, #28]	@ (8000640 <HAL_UART_RxCpltCallback+0x4c>)
 8000622:	7992      	ldrb	r2, [r2, #6]
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff59 	bl	80004dc <Tx_msg>
        HAL_UART_Receive_IT(&huart2, Rx_data, sizeof(Rx_data));
 800062a:	2208      	movs	r2, #8
 800062c:	4904      	ldr	r1, [pc, #16]	@ (8000640 <HAL_UART_RxCpltCallback+0x4c>)
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <HAL_UART_RxCpltCallback+0x54>)
 8000630:	f001 fe68 	bl	8002304 <HAL_UART_Receive_IT>
    }
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40004400 	.word	0x40004400
 8000640:	20000110 	.word	0x20000110
 8000644:	40021800 	.word	0x40021800
 8000648:	20000050 	.word	0x20000050

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000650:	f000 faf6 	bl	8000c40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000654:	f000 f864 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000658:	f000 f94e 	bl	80008f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 800065c:	f000 f8ec 	bl	8000838 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000660:	f000 f920 	bl	80008a4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000664:	f000 f8cc 	bl	8000800 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, Rx_data, sizeof(Rx_data));
 8000668:	2208      	movs	r2, #8
 800066a:	4925      	ldr	r1, [pc, #148]	@ (8000700 <main+0xb4>)
 800066c:	4825      	ldr	r0, [pc, #148]	@ (8000704 <main+0xb8>)
 800066e:	f001 fe49 	bl	8002304 <HAL_UART_Receive_IT>

  HAL_CAN_Start(&hcan1);
 8000672:	4825      	ldr	r0, [pc, #148]	@ (8000708 <main+0xbc>)
 8000674:	f000 fc51 	bl	8000f1a <HAL_CAN_Start>

  //진동 101
  Tx0Header.DLC = 1; // data length
 8000678:	4b24      	ldr	r3, [pc, #144]	@ (800070c <main+0xc0>)
 800067a:	2201      	movs	r2, #1
 800067c:	611a      	str	r2, [r3, #16]
  Tx0Header.IDE = CAN_ID_STD;
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <main+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  Tx0Header.RTR = CAN_RTR_DATA;
 8000684:	4b21      	ldr	r3, [pc, #132]	@ (800070c <main+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  Tx0Header.StdId = 0x101;
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <main+0xc0>)
 800068c:	f240 1201 	movw	r2, #257	@ 0x101
 8000690:	601a      	str	r2, [r3, #0]

  //led 102
  Tx1Header.DLC = 5; // data length
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <main+0xc4>)
 8000694:	2205      	movs	r2, #5
 8000696:	611a      	str	r2, [r3, #16]
  Tx1Header.IDE = CAN_ID_STD;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <main+0xc4>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  Tx1Header.RTR = CAN_RTR_DATA;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <main+0xc4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	60da      	str	r2, [r3, #12]
  Tx1Header.StdId = 0x102;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <main+0xc4>)
 80006a6:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80006aa:	601a      	str	r2, [r3, #0]

  //linear 103
  Tx2Header.DLC = 1; // data length
 80006ac:	4b19      	ldr	r3, [pc, #100]	@ (8000714 <main+0xc8>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	611a      	str	r2, [r3, #16]
  Tx2Header.IDE = CAN_ID_STD;
 80006b2:	4b18      	ldr	r3, [pc, #96]	@ (8000714 <main+0xc8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  Tx2Header.RTR = CAN_RTR_DATA;
 80006b8:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <main+0xc8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  Tx2Header.StdId = 0x103;
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <main+0xc8>)
 80006c0:	f240 1203 	movw	r2, #259	@ 0x103
 80006c4:	601a      	str	r2, [r3, #0]

  //motor 104
  Tx3Header.DLC = 1; // data length
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <main+0xcc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	611a      	str	r2, [r3, #16]
  Tx3Header.IDE = CAN_ID_STD;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <main+0xcc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  Tx3Header.RTR = CAN_RTR_DATA;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <main+0xcc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  Tx3Header.StdId = 0x104;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <main+0xcc>)
 80006da:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006de:	601a      	str	r2, [r3, #0]

  //auto 200
  Tx4Header.DLC = 1; // data length
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <main+0xd0>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	611a      	str	r2, [r3, #16]
  Tx4Header.IDE = CAN_ID_STD;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <main+0xd0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  Tx4Header.RTR = CAN_RTR_DATA;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <main+0xd0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  Tx4Header.StdId = 0x200;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <main+0xd0>)
 80006f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006fa:	bf00      	nop
 80006fc:	e7fd      	b.n	80006fa <main+0xae>
 80006fe:	bf00      	nop
 8000700:	20000110 	.word	0x20000110
 8000704:	20000050 	.word	0x20000050
 8000708:	20000028 	.word	0x20000028
 800070c:	20000098 	.word	0x20000098
 8000710:	200000b0 	.word	0x200000b0
 8000714:	200000c8 	.word	0x200000c8
 8000718:	200000e0 	.word	0x200000e0
 800071c:	200000f8 	.word	0x200000f8

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b094      	sub	sp, #80	@ 0x50
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0320 	add.w	r3, r7, #32
 800072a:	2230      	movs	r2, #48	@ 0x30
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fd0c 	bl	800314c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <SystemClock_Config+0xd8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <SystemClock_Config+0xd8>)
 800074e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xd8>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000760:	2300      	movs	r3, #0
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <SystemClock_Config+0xdc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a24      	ldr	r2, [pc, #144]	@ (80007fc <SystemClock_Config+0xdc>)
 800076a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <SystemClock_Config+0xdc>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000794:	23b4      	movs	r3, #180	@ 0xb4
 8000796:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a0:	f107 0320 	add.w	r3, r7, #32
 80007a4:	4618      	mov	r0, r3
 80007a6:	f001 f8c5 	bl	8001934 <HAL_RCC_OscConfig>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b0:	f000 f904 	bl	80009bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b4:	f001 f86e 	bl	8001894 <HAL_PWREx_EnableOverDrive>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007be:	f000 f8fd 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c2:	230f      	movs	r3, #15
 80007c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c6:	2302      	movs	r3, #2
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2105      	movs	r1, #5
 80007e0:	4618      	mov	r0, r3
 80007e2:	f001 fb1f 	bl	8001e24 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80007ec:	f000 f8e6 	bl	80009bc <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	@ 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2006      	movs	r0, #6
 800080a:	f000 fd76 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800080e:	2006      	movs	r0, #6
 8000810:	f000 fd8f 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2005      	movs	r0, #5
 800081a:	f000 fd6e 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800081e:	2005      	movs	r0, #5
 8000820:	f000 fd87 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2026      	movs	r0, #38	@ 0x26
 800082a:	f000 fd66 	bl	80012fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800082e:	2026      	movs	r0, #38	@ 0x26
 8000830:	f000 fd7f 	bl	8001332 <HAL_NVIC_EnableIRQ>
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <MX_CAN1_Init+0x64>)
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <MX_CAN1_Init+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000842:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_CAN1_Init+0x64>)
 8000844:	2206      	movs	r2, #6
 8000846:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_CAN1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_CAN1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_CAN1_Init+0x64>)
 8000856:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800085a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_CAN1_Init+0x64>)
 800085e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000862:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <MX_CAN1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_CAN1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <MX_CAN1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000876:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_CAN1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	@ (800089c <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	@ (800089c <MX_CAN1_Init+0x64>)
 800088a:	f000 fa4b 	bl	8000d24 <HAL_CAN_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000894:	f000 f892 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000028 	.word	0x20000028
 80008a0:	40006400 	.word	0x40006400

080008a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <MX_USART2_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_USART2_UART_Init+0x4c>)
 80008dc:	f001 fcc2 	bl	8002264 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f869 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000050 	.word	0x20000050
 80008f4:	40004400 	.word	0x40004400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b088      	sub	sp, #32
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b27      	ldr	r3, [pc, #156]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a26      	ldr	r2, [pc, #152]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a1f      	ldr	r2, [pc, #124]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a18      	ldr	r2, [pc, #96]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_GPIO_Init+0xb8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000968:	4812      	ldr	r0, [pc, #72]	@ (80009b4 <MX_GPIO_Init+0xbc>)
 800096a:	f000 ff3b 	bl	80017e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096e:	2301      	movs	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000976:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	4619      	mov	r1, r3
 8000982:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <MX_GPIO_Init+0xc0>)
 8000984:	f000 fd82 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000988:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098e:	2301      	movs	r3, #1
 8000990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4619      	mov	r1, r3
 80009a0:	4804      	ldr	r0, [pc, #16]	@ (80009b4 <MX_GPIO_Init+0xbc>)
 80009a2:	f000 fd73 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40021800 	.word	0x40021800
 80009b8:	40020000 	.word	0x40020000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_CAN_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_CAN_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_CAN_MspInit+0x88>)
 8000a44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_CAN_MspInit+0x88>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_CAN_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <HAL_CAN_MspInit+0x88>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_CAN_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a84:	2309      	movs	r3, #9
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_CAN_MspInit+0x8c>)
 8000a90:	f000 fcfc 	bl	800148c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	@ 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40006400 	.word	0x40006400
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_UART_MspInit+0x8c>)
 8000b1e:	f000 fcb5 	bl	800148c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f8a9 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 fe4f 	bl	800184c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb8:	4802      	ldr	r0, [pc, #8]	@ (8000bc4 <USART2_IRQHandler+0x10>)
 8000bba:	f001 fbc9 	bl	8002350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000050 	.word	0x20000050

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	@ (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bf0:	f7ff ffea 	bl	8000bc8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f002 fa9f 	bl	800315c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fd15 	bl	800064c <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c30:	080031e4 	.word	0x080031e4
  ldr r2, =_sbss
 8000c34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c38:	20000120 	.word	0x20000120

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	@ (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	@ (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 fb3b 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff fea8 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fb53 	bl	800134e <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 fb1b 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	@ (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000000 	.word	0x20000000
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	2000011c 	.word	0x2000011c

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	@ (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	2000011c 	.word	0x2000011c

08000d24 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0ed      	b.n	8000f12 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fe68 	bl	8000a18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0201 	orr.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d58:	f7ff ffd8 	bl	8000d0c <HAL_GetTick>
 8000d5c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d5e:	e012      	b.n	8000d86 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d60:	f7ff ffd4 	bl	8000d0c <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b0a      	cmp	r3, #10
 8000d6c:	d90b      	bls.n	8000d86 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2205      	movs	r2, #5
 8000d7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e0c5      	b.n	8000f12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0e5      	beq.n	8000d60 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0202 	bic.w	r2, r2, #2
 8000da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da4:	f7ff ffb2 	bl	8000d0c <HAL_GetTick>
 8000da8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000daa:	e012      	b.n	8000dd2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dac:	f7ff ffae 	bl	8000d0c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b0a      	cmp	r3, #10
 8000db8:	d90b      	bls.n	8000dd2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2205      	movs	r2, #5
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e09f      	b.n	8000f12 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e5      	bne.n	8000dac <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7e1b      	ldrb	r3, [r3, #24]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d108      	bne.n	8000dfa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	7e5b      	ldrb	r3, [r3, #25]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d108      	bne.n	8000e24 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	e007      	b.n	8000e34 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e32:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7e9b      	ldrb	r3, [r3, #26]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d108      	bne.n	8000e4e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f042 0220 	orr.w	r2, r2, #32
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e007      	b.n	8000e5e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0220 	bic.w	r2, r2, #32
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	7edb      	ldrb	r3, [r3, #27]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d108      	bne.n	8000e78 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0210 	bic.w	r2, r2, #16
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0210 	orr.w	r2, r2, #16
 8000e86:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7f1b      	ldrb	r3, [r3, #28]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d108      	bne.n	8000ea2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0208 	orr.w	r2, r2, #8
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0208 	bic.w	r2, r2, #8
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7f5b      	ldrb	r3, [r3, #29]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d108      	bne.n	8000ecc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0204 	orr.w	r2, r2, #4
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	e007      	b.n	8000edc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f022 0204 	bic.w	r2, r2, #4
 8000eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	ea42 0103 	orr.w	r1, r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d12e      	bne.n	8000f8c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0201 	bic.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f46:	f7ff fee1 	bl	8000d0c <HAL_GetTick>
 8000f4a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f4c:	e012      	b.n	8000f74 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f4e:	f7ff fedd 	bl	8000d0c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b0a      	cmp	r3, #10
 8000f5a:	d90b      	bls.n	8000f74 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e012      	b.n	8000f9a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1e5      	bne.n	8000f4e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e006      	b.n	8000f9a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f90:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
  }
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	b089      	sub	sp, #36	@ 0x24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc0:	7ffb      	ldrb	r3, [r7, #31]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d003      	beq.n	8000fce <HAL_CAN_AddTxMessage+0x2c>
 8000fc6:	7ffb      	ldrb	r3, [r7, #31]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	f040 80ad 	bne.w	8001128 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d10a      	bne.n	8000fee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d105      	bne.n	8000fee <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 8095 	beq.w	8001118 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	0e1b      	lsrs	r3, r3, #24
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10d      	bne.n	8001026 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001014:	68f9      	ldr	r1, [r7, #12]
 8001016:	6809      	ldr	r1, [r1, #0]
 8001018:	431a      	orrs	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3318      	adds	r3, #24
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e00f      	b.n	8001046 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001030:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800103a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3318      	adds	r3, #24
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	440b      	add	r3, r1
 8001044:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3318      	adds	r3, #24
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	440b      	add	r3, r1
 8001056:	3304      	adds	r3, #4
 8001058:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	7d1b      	ldrb	r3, [r3, #20]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d111      	bne.n	8001086 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3318      	adds	r3, #24
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	4413      	add	r3, r2
 800106e:	3304      	adds	r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	6811      	ldr	r1, [r2, #0]
 8001076:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3318      	adds	r3, #24
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	440b      	add	r3, r1
 8001082:	3304      	adds	r3, #4
 8001084:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3307      	adds	r3, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	061a      	lsls	r2, r3, #24
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3306      	adds	r3, #6
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	041b      	lsls	r3, r3, #16
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3305      	adds	r3, #5
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	4313      	orrs	r3, r2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	3204      	adds	r2, #4
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	4610      	mov	r0, r2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	6811      	ldr	r1, [r2, #0]
 80010ae:	ea43 0200 	orr.w	r2, r3, r0
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	011b      	lsls	r3, r3, #4
 80010b6:	440b      	add	r3, r1
 80010b8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80010bc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3303      	adds	r3, #3
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	061a      	lsls	r2, r3, #24
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3302      	adds	r3, #2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	041b      	lsls	r3, r3, #16
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	4313      	orrs	r3, r2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	4610      	mov	r0, r2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	6811      	ldr	r1, [r2, #0]
 80010e4:	ea43 0200 	orr.w	r2, r3, r0
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	011b      	lsls	r3, r3, #4
 80010ec:	440b      	add	r3, r1
 80010ee:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80010f2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	3318      	adds	r3, #24
 80010fc:	011b      	lsls	r3, r3, #4
 80010fe:	4413      	add	r3, r2
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	f043 0201 	orr.w	r2, r3, #1
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3318      	adds	r3, #24
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	440b      	add	r3, r1
 8001112:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	e00e      	b.n	8001136 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e006      	b.n	8001136 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
  }
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	@ (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	@ (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fcca 	bl	8000d0c <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d008      	beq.n	8001398 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2280      	movs	r2, #128	@ 0x80
 800138a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e052      	b.n	800143e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0216 	bic.w	r2, r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d103      	bne.n	80013c8 <HAL_DMA_Abort+0x62>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0208 	bic.w	r2, r2, #8
 80013d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e8:	e013      	b.n	8001412 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ea:	f7ff fc8f 	bl	8000d0c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d90c      	bls.n	8001412 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2220      	movs	r2, #32
 80013fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2203      	movs	r2, #3
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e015      	b.n	800143e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e4      	bne.n	80013ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001424:	223f      	movs	r2, #63	@ 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d004      	beq.n	8001464 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2280      	movs	r2, #128	@ 0x80
 800145e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00c      	b.n	800147e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2205      	movs	r2, #5
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
 80014a6:	e177      	b.n	8001798 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014a8:	2201      	movs	r2, #1
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	f040 8166 	bne.w	8001792 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d005      	beq.n	80014de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d130      	bne.n	8001540 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	69ba      	ldr	r2, [r7, #24]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4313      	orrs	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	69b9      	ldr	r1, [r7, #24]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80c0 	beq.w	8001792 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	4b66      	ldr	r3, [pc, #408]	@ (80017b0 <HAL_GPIO_Init+0x324>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	4a65      	ldr	r2, [pc, #404]	@ (80017b0 <HAL_GPIO_Init+0x324>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001620:	6453      	str	r3, [r2, #68]	@ 0x44
 8001622:	4b63      	ldr	r3, [pc, #396]	@ (80017b0 <HAL_GPIO_Init+0x324>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162e:	4a61      	ldr	r2, [pc, #388]	@ (80017b4 <HAL_GPIO_Init+0x328>)
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3302      	adds	r3, #2
 8001636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	220f      	movs	r2, #15
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a58      	ldr	r2, [pc, #352]	@ (80017b8 <HAL_GPIO_Init+0x32c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d037      	beq.n	80016ca <HAL_GPIO_Init+0x23e>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a57      	ldr	r2, [pc, #348]	@ (80017bc <HAL_GPIO_Init+0x330>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d031      	beq.n	80016c6 <HAL_GPIO_Init+0x23a>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a56      	ldr	r2, [pc, #344]	@ (80017c0 <HAL_GPIO_Init+0x334>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d02b      	beq.n	80016c2 <HAL_GPIO_Init+0x236>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a55      	ldr	r2, [pc, #340]	@ (80017c4 <HAL_GPIO_Init+0x338>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d025      	beq.n	80016be <HAL_GPIO_Init+0x232>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a54      	ldr	r2, [pc, #336]	@ (80017c8 <HAL_GPIO_Init+0x33c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01f      	beq.n	80016ba <HAL_GPIO_Init+0x22e>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a53      	ldr	r2, [pc, #332]	@ (80017cc <HAL_GPIO_Init+0x340>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x22a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a52      	ldr	r2, [pc, #328]	@ (80017d0 <HAL_GPIO_Init+0x344>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a51      	ldr	r2, [pc, #324]	@ (80017d4 <HAL_GPIO_Init+0x348>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a50      	ldr	r2, [pc, #320]	@ (80017d8 <HAL_GPIO_Init+0x34c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4f      	ldr	r2, [pc, #316]	@ (80017dc <HAL_GPIO_Init+0x350>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x21a>
 80016a2:	2309      	movs	r3, #9
 80016a4:	e012      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016a6:	230a      	movs	r3, #10
 80016a8:	e010      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016aa:	2308      	movs	r3, #8
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016ae:	2307      	movs	r3, #7
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x240>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	@ (80017b4 <HAL_GPIO_Init+0x328>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b3d      	ldr	r3, [pc, #244]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a34      	ldr	r2, [pc, #208]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1f      	ldr	r2, [pc, #124]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <HAL_GPIO_Init+0x354>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae84 	bls.w	80014a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	@ 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40022000 	.word	0x40022000
 80017dc:	40022400 	.word	0x40022400
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017f4:	787b      	ldrb	r3, [r7, #1]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001800:	e003      	b.n	800180a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001802:	887b      	ldrh	r3, [r7, #2]
 8001804:	041a      	lsls	r2, r3, #16
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	619a      	str	r2, [r3, #24]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001816:	b480      	push	{r7}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	041a      	lsls	r2, r3, #16
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43d9      	mvns	r1, r3
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	400b      	ands	r3, r1
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001856:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001858:	695a      	ldr	r2, [r3, #20]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001868:	88fb      	ldrh	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f000 f806 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
}
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40013c00 	.word	0x40013c00

0800187c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	603b      	str	r3, [r7, #0]
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x90>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x90>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <HAL_PWREx_EnableOverDrive+0x90>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001928 <HAL_PWREx_EnableOverDrive+0x94>)
 80018bc:	2201      	movs	r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018c0:	f7ff fa24 	bl	8000d0c <HAL_GetTick>
 80018c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018c6:	e009      	b.n	80018dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018c8:	f7ff fa20 	bl	8000d0c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d6:	d901      	bls.n	80018dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e01f      	b.n	800191c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018dc:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_PWREx_EnableOverDrive+0x98>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e8:	d1ee      	bne.n	80018c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f0:	f7ff fa0c 	bl	8000d0c <HAL_GetTick>
 80018f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80018f6:	e009      	b.n	800190c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018f8:	f7ff fa08 	bl	8000d0c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001906:	d901      	bls.n	800190c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e007      	b.n	800191c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800190c:	4b07      	ldr	r3, [pc, #28]	@ (800192c <HAL_PWREx_EnableOverDrive+0x98>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001918:	d1ee      	bne.n	80018f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	420e0040 	.word	0x420e0040
 800192c:	40007000 	.word	0x40007000
 8001930:	420e0044 	.word	0x420e0044

08001934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e267      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	2b00      	cmp	r3, #0
 8001950:	d075      	beq.n	8001a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001952:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d00c      	beq.n	8001978 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800195e:	4b85      	ldr	r3, [pc, #532]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001966:	2b08      	cmp	r3, #8
 8001968:	d112      	bne.n	8001990 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196a:	4b82      	ldr	r3, [pc, #520]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001976:	d10b      	bne.n	8001990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	4b7e      	ldr	r3, [pc, #504]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d05b      	beq.n	8001a3c <HAL_RCC_OscConfig+0x108>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d157      	bne.n	8001a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e242      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001998:	d106      	bne.n	80019a8 <HAL_RCC_OscConfig+0x74>
 800199a:	4b76      	ldr	r3, [pc, #472]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a75      	ldr	r2, [pc, #468]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0xb0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b2:	4b70      	ldr	r3, [pc, #448]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b6d      	ldr	r3, [pc, #436]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0xb0>
 80019cc:	4b69      	ldr	r3, [pc, #420]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a68      	ldr	r2, [pc, #416]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b66      	ldr	r3, [pc, #408]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a65      	ldr	r2, [pc, #404]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f98e 	bl	8000d0c <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f98a 	bl	8000d0c <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	@ 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e207      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b5b      	ldr	r3, [pc, #364]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0xc0>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f97a 	bl	8000d0c <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f976 	bl	8000d0c <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	@ 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1f3      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	4b51      	ldr	r3, [pc, #324]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0xe8>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b47      	ldr	r3, [pc, #284]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a62:	4b44      	ldr	r3, [pc, #272]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x152>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1c7      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3b      	ldr	r3, [pc, #236]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4937      	ldr	r1, [pc, #220]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b34      	ldr	r3, [pc, #208]	@ (8001b78 <HAL_RCC_OscConfig+0x244>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f92f 	bl	8000d0c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f92b 	bl	8000d0c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1a8      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4925      	ldr	r1, [pc, #148]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <HAL_RCC_OscConfig+0x244>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f90e 	bl	8000d0c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff f90a 	bl	8000d0c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e187      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d036      	beq.n	8001b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d016      	beq.n	8001b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <HAL_RCC_OscConfig+0x248>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f8ee 	bl	8000d0c <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7ff f8ea 	bl	8000d0c <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e167      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_RCC_OscConfig+0x240>)
 8001b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x200>
 8001b52:	e01b      	b.n	8001b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_OscConfig+0x248>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5a:	f7ff f8d7 	bl	8000d0c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b60:	e00e      	b.n	8001b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff f8d3 	bl	8000d0c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d907      	bls.n	8001b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e150      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
 8001b74:	40023800 	.word	0x40023800
 8001b78:	42470000 	.word	0x42470000
 8001b7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	4b88      	ldr	r3, [pc, #544]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1ea      	bne.n	8001b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8097 	beq.w	8001cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9e:	4b81      	ldr	r3, [pc, #516]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10f      	bne.n	8001bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b7d      	ldr	r3, [pc, #500]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a7c      	ldr	r2, [pc, #496]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b7a      	ldr	r3, [pc, #488]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b77      	ldr	r3, [pc, #476]	@ (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd6:	4b74      	ldr	r3, [pc, #464]	@ (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a73      	ldr	r2, [pc, #460]	@ (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff f893 	bl	8000d0c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff f88f 	bl	8000d0c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e10c      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8001da8 <HAL_RCC_OscConfig+0x474>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2ea>
 8001c10:	4b64      	ldr	r3, [pc, #400]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a63      	ldr	r2, [pc, #396]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c1c:	e01c      	b.n	8001c58 <HAL_RCC_OscConfig+0x324>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x30c>
 8001c26:	4b5f      	ldr	r3, [pc, #380]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	f043 0304 	orr.w	r3, r3, #4
 8001c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c32:	4b5c      	ldr	r3, [pc, #368]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c36:	4a5b      	ldr	r2, [pc, #364]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0x324>
 8001c40:	4b58      	ldr	r3, [pc, #352]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c44:	4a57      	ldr	r2, [pc, #348]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c4c:	4b55      	ldr	r3, [pc, #340]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c50:	4a54      	ldr	r2, [pc, #336]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f023 0304 	bic.w	r3, r3, #4
 8001c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d015      	beq.n	8001c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f854 	bl	8000d0c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c66:	e00a      	b.n	8001c7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c68:	f7ff f850 	bl	8000d0c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e0cb      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	4b49      	ldr	r3, [pc, #292]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0ee      	beq.n	8001c68 <HAL_RCC_OscConfig+0x334>
 8001c8a:	e014      	b.n	8001cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f83e 	bl	8000d0c <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff f83a 	bl	8000d0c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0b5      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ee      	bne.n	8001c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d105      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbc:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	4a38      	ldr	r2, [pc, #224]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a1 	beq.w	8001e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cd2:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d05c      	beq.n	8001d98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d141      	bne.n	8001d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_OscConfig+0x478>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f80e 	bl	8000d0c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f80a 	bl	8000d0c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e087      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	4b27      	ldr	r3, [pc, #156]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d20:	019b      	lsls	r3, r3, #6
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d28:	085b      	lsrs	r3, r3, #1
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	491b      	ldr	r1, [pc, #108]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_OscConfig+0x478>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7fe ffe3 	bl	8000d0c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4a:	f7fe ffdf 	bl	8000d0c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e05c      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x416>
 8001d68:	e054      	b.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <HAL_RCC_OscConfig+0x478>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d70:	f7fe ffcc 	bl	8000d0c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7fe ffc8 	bl	8000d0c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e045      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_RCC_OscConfig+0x470>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x444>
 8001d96:	e03d      	b.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e038      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40007000 	.word	0x40007000
 8001dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x4ec>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d028      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d121      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d11a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001de0:	4013      	ands	r3, r2
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d111      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0cc      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e38:	4b68      	ldr	r3, [pc, #416]	@ (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d90c      	bls.n	8001e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b65      	ldr	r3, [pc, #404]	@ (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4e:	4b63      	ldr	r3, [pc, #396]	@ (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d001      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0b8      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e78:	4b59      	ldr	r3, [pc, #356]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e90:	4b53      	ldr	r3, [pc, #332]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a52      	ldr	r2, [pc, #328]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e9c:	4b50      	ldr	r3, [pc, #320]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	494d      	ldr	r1, [pc, #308]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d044      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d107      	bne.n	8001ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d119      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d109      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e06f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e067      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f02:	4b37      	ldr	r3, [pc, #220]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 0203 	bic.w	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	4934      	ldr	r1, [pc, #208]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fefa 	bl	8000d0c <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	e00a      	b.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1c:	f7fe fef6 	bl	8000d0c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e04f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 020c 	and.w	r2, r3, #12
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d1eb      	bne.n	8001f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f44:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d20c      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5a:	4b20      	ldr	r3, [pc, #128]	@ (8001fdc <HAL_RCC_ClockConfig+0x1b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e032      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f78:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	4916      	ldr	r1, [pc, #88]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f96:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001faa:	f000 f821 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	490a      	ldr	r1, [pc, #40]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	5ccb      	ldrb	r3, [r1, r3]
 8001fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fc6:	4b09      	ldr	r3, [pc, #36]	@ (8001fec <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe5a 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023c00 	.word	0x40023c00
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	080031bc 	.word	0x080031bc
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ff4:	b094      	sub	sp, #80	@ 0x50
 8001ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002008:	4b79      	ldr	r3, [pc, #484]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d00d      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x40>
 8002014:	2b08      	cmp	r3, #8
 8002016:	f200 80e1 	bhi.w	80021dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x34>
 800201e:	2b04      	cmp	r3, #4
 8002020:	d003      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x3a>
 8002022:	e0db      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002024:	4b73      	ldr	r3, [pc, #460]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002026:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002028:	e0db      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800202a:	4b73      	ldr	r3, [pc, #460]	@ (80021f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800202c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800202e:	e0d8      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002030:	4b6f      	ldr	r3, [pc, #444]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002038:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203a:	4b6d      	ldr	r3, [pc, #436]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4b6a      	ldr	r3, [pc, #424]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	099b      	lsrs	r3, r3, #6
 800204c:	2200      	movs	r2, #0
 800204e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002050:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002058:	633b      	str	r3, [r7, #48]	@ 0x30
 800205a:	2300      	movs	r3, #0
 800205c:	637b      	str	r3, [r7, #52]	@ 0x34
 800205e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	f04f 0000 	mov.w	r0, #0
 800206a:	f04f 0100 	mov.w	r1, #0
 800206e:	0159      	lsls	r1, r3, #5
 8002070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002074:	0150      	lsls	r0, r2, #5
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4621      	mov	r1, r4
 800207c:	1a51      	subs	r1, r2, r1
 800207e:	6139      	str	r1, [r7, #16]
 8002080:	4629      	mov	r1, r5
 8002082:	eb63 0301 	sbc.w	r3, r3, r1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	f04f 0200 	mov.w	r2, #0
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002094:	4659      	mov	r1, fp
 8002096:	018b      	lsls	r3, r1, #6
 8002098:	4651      	mov	r1, sl
 800209a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209e:	4651      	mov	r1, sl
 80020a0:	018a      	lsls	r2, r1, #6
 80020a2:	4651      	mov	r1, sl
 80020a4:	ebb2 0801 	subs.w	r8, r2, r1
 80020a8:	4659      	mov	r1, fp
 80020aa:	eb63 0901 	sbc.w	r9, r3, r1
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020c2:	4690      	mov	r8, r2
 80020c4:	4699      	mov	r9, r3
 80020c6:	4623      	mov	r3, r4
 80020c8:	eb18 0303 	adds.w	r3, r8, r3
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	462b      	mov	r3, r5
 80020d0:	eb49 0303 	adc.w	r3, r9, r3
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020e2:	4629      	mov	r1, r5
 80020e4:	024b      	lsls	r3, r1, #9
 80020e6:	4621      	mov	r1, r4
 80020e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020ec:	4621      	mov	r1, r4
 80020ee:	024a      	lsls	r2, r1, #9
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020f6:	2200      	movs	r2, #0
 80020f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002100:	f7fe f874 	bl	80001ec <__aeabi_uldivmod>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4613      	mov	r3, r2
 800210a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800210c:	e058      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b38      	ldr	r3, [pc, #224]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	2200      	movs	r2, #0
 8002116:	4618      	mov	r0, r3
 8002118:	4611      	mov	r1, r2
 800211a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800211e:	623b      	str	r3, [r7, #32]
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
 8002124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002128:	4642      	mov	r2, r8
 800212a:	464b      	mov	r3, r9
 800212c:	f04f 0000 	mov.w	r0, #0
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	0159      	lsls	r1, r3, #5
 8002136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800213a:	0150      	lsls	r0, r2, #5
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4641      	mov	r1, r8
 8002142:	ebb2 0a01 	subs.w	sl, r2, r1
 8002146:	4649      	mov	r1, r9
 8002148:	eb63 0b01 	sbc.w	fp, r3, r1
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800215c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002160:	ebb2 040a 	subs.w	r4, r2, sl
 8002164:	eb63 050b 	sbc.w	r5, r3, fp
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	00eb      	lsls	r3, r5, #3
 8002172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002176:	00e2      	lsls	r2, r4, #3
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	4643      	mov	r3, r8
 800217e:	18e3      	adds	r3, r4, r3
 8002180:	603b      	str	r3, [r7, #0]
 8002182:	464b      	mov	r3, r9
 8002184:	eb45 0303 	adc.w	r3, r5, r3
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002196:	4629      	mov	r1, r5
 8002198:	028b      	lsls	r3, r1, #10
 800219a:	4621      	mov	r1, r4
 800219c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021a0:	4621      	mov	r1, r4
 80021a2:	028a      	lsls	r2, r1, #10
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021aa:	2200      	movs	r2, #0
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	61fa      	str	r2, [r7, #28]
 80021b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b4:	f7fe f81a 	bl	80001ec <__aeabi_uldivmod>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4613      	mov	r3, r2
 80021be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	0c1b      	lsrs	r3, r3, #16
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	3301      	adds	r3, #1
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80021d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021da:	e002      	b.n	80021e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3750      	adds	r7, #80	@ 0x50
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a9b      	lsrs	r3, r3, #10
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4903      	ldr	r1, [pc, #12]	@ (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40023800 	.word	0x40023800
 8002238:	080031cc 	.word	0x080031cc

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffdc 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0b5b      	lsrs	r3, r3, #13
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	@ (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	080031cc 	.word	0x080031cc

08002264 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e042      	b.n	80022fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d106      	bne.n	8002290 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7fe fc0c 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2224      	movs	r2, #36	@ 0x24
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 fcdb 	bl	8002c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b20      	cmp	r3, #32
 800231c:	d112      	bne.n	8002344 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_UART_Receive_IT+0x26>
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00b      	b.n	8002346 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	461a      	mov	r2, r3
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 faba 	bl	80028b4 <UART_Start_Receive_IT>
 8002340:	4603      	mov	r3, r0
 8002342:	e000      	b.n	8002346 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b0ba      	sub	sp, #232	@ 0xe8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800238e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_UART_IRQHandler+0x66>
 80023a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fb99 	bl	8002ae6 <UART_Receive_IT>
      return;
 80023b4:	e25b      	b.n	800286e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80de 	beq.w	800257c <HAL_UART_IRQHandler+0x22c>
 80023c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d106      	bne.n	80023da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80d1 	beq.w	800257c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0xae>
 80023e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0xd2>
 800240a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d005      	beq.n	8002422 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f043 0202 	orr.w	r2, r3, #2
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <HAL_UART_IRQHandler+0xf6>
 800242e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f043 0204 	orr.w	r2, r3, #4
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d011      	beq.n	8002476 <HAL_UART_IRQHandler+0x126>
 8002452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002456:	f003 0320 	and.w	r3, r3, #32
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800245e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	f043 0208 	orr.w	r2, r3, #8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 81f2 	beq.w	8002864 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d008      	beq.n	800249e <HAL_UART_IRQHandler+0x14e>
 800248c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb24 	bl	8002ae6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a8:	2b40      	cmp	r3, #64	@ 0x40
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d103      	bne.n	80024ca <HAL_UART_IRQHandler+0x17a>
 80024c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d04f      	beq.n	800256a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa2c 	bl	8002928 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024da:	2b40      	cmp	r3, #64	@ 0x40
 80024dc:	d141      	bne.n	8002562 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3314      	adds	r3, #20
 80024e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ec:	e853 3f00 	ldrex	r3, [r3]
 80024f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80024f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3314      	adds	r3, #20
 8002506:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800250a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800250e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002512:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002516:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800251a:	e841 2300 	strex	r3, r2, [r1]
 800251e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1d9      	bne.n	80024de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252e:	2b00      	cmp	r3, #0
 8002530:	d013      	beq.n	800255a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002536:	4a7e      	ldr	r2, [pc, #504]	@ (8002730 <HAL_UART_IRQHandler+0x3e0>)
 8002538:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe ff81 	bl	8001446 <HAL_DMA_Abort_IT>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002554:	4610      	mov	r0, r2
 8002556:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002558:	e00e      	b.n	8002578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f994 	bl	8002888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002560:	e00a      	b.n	8002578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f990 	bl	8002888 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002568:	e006      	b.n	8002578 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f98c 	bl	8002888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002576:	e175      	b.n	8002864 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002578:	bf00      	nop
    return;
 800257a:	e173      	b.n	8002864 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	2b01      	cmp	r3, #1
 8002582:	f040 814f 	bne.w	8002824 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8148 	beq.w	8002824 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 8141 	beq.w	8002824 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	2b40      	cmp	r3, #64	@ 0x40
 80025c4:	f040 80b6 	bne.w	8002734 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8145 	beq.w	8002868 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025e6:	429a      	cmp	r2, r3
 80025e8:	f080 813e 	bcs.w	8002868 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025fe:	f000 8088 	beq.w	8002712 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002618:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800261c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800262e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002632:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002636:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800263a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800263e:	e841 2300 	strex	r3, r2, [r1]
 8002642:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002646:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1d9      	bne.n	8002602 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002656:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002658:	e853 3f00 	ldrex	r3, [r3]
 800265c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800265e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002660:	f023 0301 	bic.w	r3, r3, #1
 8002664:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3314      	adds	r3, #20
 800266e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002672:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002676:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800267a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800267e:	e841 2300 	strex	r3, r2, [r1]
 8002682:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002684:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1e1      	bne.n	800264e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3314      	adds	r3, #20
 8002690:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002694:	e853 3f00 	ldrex	r3, [r3]
 8002698:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800269a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3314      	adds	r3, #20
 80026aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026b6:	e841 2300 	strex	r3, r2, [r1]
 80026ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80026bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e3      	bne.n	800268a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	330c      	adds	r3, #12
 80026d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026e2:	f023 0310 	bic.w	r3, r3, #16
 80026e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80026f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026fc:	e841 2300 	strex	r3, r2, [r1]
 8002700:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002702:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1e3      	bne.n	80026d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fe2a 	bl	8001366 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002720:	b29b      	uxth	r3, r3
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	b29b      	uxth	r3, r3
 8002726:	4619      	mov	r1, r3
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8b7 	bl	800289c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800272e:	e09b      	b.n	8002868 <HAL_UART_IRQHandler+0x518>
 8002730:	080029ef 	.word	0x080029ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800273c:	b29b      	uxth	r3, r3
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 808e 	beq.w	800286c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 8089 	beq.w	800286c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002764:	e853 3f00 	ldrex	r3, [r3]
 8002768:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800276a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800276c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800277e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002782:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002784:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800278c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1e3      	bne.n	800275a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3314      	adds	r3, #20
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	e853 3f00 	ldrex	r3, [r3]
 80027a0:	623b      	str	r3, [r7, #32]
   return(result);
 80027a2:	6a3b      	ldr	r3, [r7, #32]
 80027a4:	f023 0301 	bic.w	r3, r3, #1
 80027a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80027b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027be:	e841 2300 	strex	r3, r2, [r1]
 80027c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e3      	bne.n	8002792 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	330c      	adds	r3, #12
 80027de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0310 	bic.w	r3, r3, #16
 80027ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	330c      	adds	r3, #12
 80027f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027fc:	61fa      	str	r2, [r7, #28]
 80027fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	69b9      	ldr	r1, [r7, #24]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	617b      	str	r3, [r7, #20]
   return(result);
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e3      	bne.n	80027d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002816:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800281a:	4619      	mov	r1, r3
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f83d 	bl	800289c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002822:	e023      	b.n	800286c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <HAL_UART_IRQHandler+0x4f4>
 8002830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f8ea 	bl	8002a16 <UART_Transmit_IT>
    return;
 8002842:	e014      	b.n	800286e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <HAL_UART_IRQHandler+0x51e>
 8002850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f92a 	bl	8002ab6 <UART_EndTransmit_IT>
    return;
 8002862:	e004      	b.n	800286e <HAL_UART_IRQHandler+0x51e>
    return;
 8002864:	bf00      	nop
 8002866:	e002      	b.n	800286e <HAL_UART_IRQHandler+0x51e>
      return;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <HAL_UART_IRQHandler+0x51e>
      return;
 800286c:	bf00      	nop
  }
}
 800286e:	37e8      	adds	r7, #232	@ 0xe8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	60b9      	str	r1, [r7, #8]
 80028be:	4613      	mov	r3, r2
 80028c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2222      	movs	r2, #34	@ 0x22
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0220 	orr.w	r2, r2, #32
 8002918:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002928:	b480      	push	{r7}
 800292a:	b095      	sub	sp, #84	@ 0x54
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	330c      	adds	r3, #12
 8002936:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800293a:	e853 3f00 	ldrex	r3, [r3]
 800293e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002950:	643a      	str	r2, [r7, #64]	@ 0x40
 8002952:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002956:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800295e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e5      	bne.n	8002930 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3314      	adds	r3, #20
 800296a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	e853 3f00 	ldrex	r3, [r3]
 8002972:	61fb      	str	r3, [r7, #28]
   return(result);
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3314      	adds	r3, #20
 8002982:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002984:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800298a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800298c:	e841 2300 	strex	r3, r2, [r1]
 8002990:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1e5      	bne.n	8002964 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	2b01      	cmp	r3, #1
 800299e:	d119      	bne.n	80029d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	330c      	adds	r3, #12
 80029a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	e853 3f00 	ldrex	r3, [r3]
 80029ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f023 0310 	bic.w	r3, r3, #16
 80029b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	330c      	adds	r3, #12
 80029be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029c0:	61ba      	str	r2, [r7, #24]
 80029c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c4:	6979      	ldr	r1, [r7, #20]
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	e841 2300 	strex	r3, r2, [r1]
 80029cc:	613b      	str	r3, [r7, #16]
   return(result);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e5      	bne.n	80029a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029e2:	bf00      	nop
 80029e4:	3754      	adds	r7, #84	@ 0x54
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f7ff ff3d 	bl	8002888 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b21      	cmp	r3, #33	@ 0x21
 8002a28:	d13e      	bne.n	8002aa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a32:	d114      	bne.n	8002a5e <UART_Transmit_IT+0x48>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d110      	bne.n	8002a5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	1c9a      	adds	r2, r3, #2
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	621a      	str	r2, [r3, #32]
 8002a5c:	e008      	b.n	8002a70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6211      	str	r1, [r2, #32]
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10f      	bne.n	8002aa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002acc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fecc 	bl	8002874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08c      	sub	sp, #48	@ 0x30
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b22      	cmp	r3, #34	@ 0x22
 8002af8:	f040 80ae 	bne.w	8002c58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b04:	d117      	bne.n	8002b36 <UART_Receive_IT+0x50>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d113      	bne.n	8002b36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2e:	1c9a      	adds	r2, r3, #2
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b34:	e026      	b.n	8002b84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b48:	d007      	beq.n	8002b5a <UART_Receive_IT+0x74>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10a      	bne.n	8002b68 <UART_Receive_IT+0x82>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b64:	701a      	strb	r2, [r3, #0]
 8002b66:	e008      	b.n	8002b7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4619      	mov	r1, r3
 8002b92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d15d      	bne.n	8002c54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0220 	bic.w	r2, r2, #32
 8002ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0201 	bic.w	r2, r2, #1
 8002bc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d135      	bne.n	8002c4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	330c      	adds	r3, #12
 8002bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	e853 3f00 	ldrex	r3, [r3]
 8002bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f023 0310 	bic.w	r3, r3, #16
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c04:	623a      	str	r2, [r7, #32]
 8002c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	e841 2300 	strex	r3, r2, [r1]
 8002c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e5      	bne.n	8002be4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0310 	and.w	r3, r3, #16
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d10a      	bne.n	8002c3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c40:	4619      	mov	r1, r3
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff fe2a 	bl	800289c <HAL_UARTEx_RxEventCallback>
 8002c48:	e002      	b.n	8002c50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd fcd2 	bl	80005f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e002      	b.n	8002c5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3730      	adds	r7, #48	@ 0x30
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c68:	b0c0      	sub	sp, #256	@ 0x100
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c80:	68d9      	ldr	r1, [r3, #12]
 8002c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	ea40 0301 	orr.w	r3, r0, r1
 8002c8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cbc:	f021 010c 	bic.w	r1, r1, #12
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cde:	6999      	ldr	r1, [r3, #24]
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	ea40 0301 	orr.w	r3, r0, r1
 8002cea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b8f      	ldr	r3, [pc, #572]	@ (8002f30 <UART_SetConfig+0x2cc>)
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d005      	beq.n	8002d04 <UART_SetConfig+0xa0>
 8002cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4b8d      	ldr	r3, [pc, #564]	@ (8002f34 <UART_SetConfig+0x2d0>)
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d104      	bne.n	8002d0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7ff fa9a 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8002d08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d0c:	e003      	b.n	8002d16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d0e:	f7ff fa81 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8002d12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d20:	f040 810c 	bne.w	8002f3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	1891      	adds	r1, r2, r2
 8002d3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d46:	4621      	mov	r1, r4
 8002d48:	eb12 0801 	adds.w	r8, r2, r1
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	eb43 0901 	adc.w	r9, r3, r1
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d66:	4690      	mov	r8, r2
 8002d68:	4699      	mov	r9, r3
 8002d6a:	4623      	mov	r3, r4
 8002d6c:	eb18 0303 	adds.w	r3, r8, r3
 8002d70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d74:	462b      	mov	r3, r5
 8002d76:	eb49 0303 	adc.w	r3, r9, r3
 8002d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d92:	460b      	mov	r3, r1
 8002d94:	18db      	adds	r3, r3, r3
 8002d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d98:	4613      	mov	r3, r2
 8002d9a:	eb42 0303 	adc.w	r3, r2, r3
 8002d9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002da0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002da4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002da8:	f7fd fa20 	bl	80001ec <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4b61      	ldr	r3, [pc, #388]	@ (8002f38 <UART_SetConfig+0x2d4>)
 8002db2:	fba3 2302 	umull	r2, r3, r3, r2
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	011c      	lsls	r4, r3, #4
 8002dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	1891      	adds	r1, r2, r2
 8002dd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dd4:	415b      	adcs	r3, r3
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ddc:	4641      	mov	r1, r8
 8002dde:	eb12 0a01 	adds.w	sl, r2, r1
 8002de2:	4649      	mov	r1, r9
 8002de4:	eb43 0b01 	adc.w	fp, r3, r1
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002df4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002df8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dfc:	4692      	mov	sl, r2
 8002dfe:	469b      	mov	fp, r3
 8002e00:	4643      	mov	r3, r8
 8002e02:	eb1a 0303 	adds.w	r3, sl, r3
 8002e06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e0a:	464b      	mov	r3, r9
 8002e0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002e10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	18db      	adds	r3, r3, r3
 8002e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2e:	4613      	mov	r3, r2
 8002e30:	eb42 0303 	adc.w	r3, r2, r3
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e3e:	f7fd f9d5 	bl	80001ec <__aeabi_uldivmod>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4611      	mov	r1, r2
 8002e48:	4b3b      	ldr	r3, [pc, #236]	@ (8002f38 <UART_SetConfig+0x2d4>)
 8002e4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	2264      	movs	r2, #100	@ 0x64
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	1acb      	subs	r3, r1, r3
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e5e:	4b36      	ldr	r3, [pc, #216]	@ (8002f38 <UART_SetConfig+0x2d4>)
 8002e60:	fba3 2302 	umull	r2, r3, r3, r2
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e6c:	441c      	add	r4, r3
 8002e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e72:	2200      	movs	r2, #0
 8002e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	1891      	adds	r1, r2, r2
 8002e86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e88:	415b      	adcs	r3, r3
 8002e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e90:	4641      	mov	r1, r8
 8002e92:	1851      	adds	r1, r2, r1
 8002e94:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e96:	4649      	mov	r1, r9
 8002e98:	414b      	adcs	r3, r1
 8002e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	00cb      	lsls	r3, r1, #3
 8002eac:	4651      	mov	r1, sl
 8002eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	00ca      	lsls	r2, r1, #3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ec4:	464b      	mov	r3, r9
 8002ec6:	460a      	mov	r2, r1
 8002ec8:	eb42 0303 	adc.w	r3, r2, r3
 8002ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002edc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ee0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	18db      	adds	r3, r3, r3
 8002ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eea:	4613      	mov	r3, r2
 8002eec:	eb42 0303 	adc.w	r3, r2, r3
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ef6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002efa:	f7fd f977 	bl	80001ec <__aeabi_uldivmod>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4b0d      	ldr	r3, [pc, #52]	@ (8002f38 <UART_SetConfig+0x2d4>)
 8002f04:	fba3 1302 	umull	r1, r3, r3, r2
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	2164      	movs	r1, #100	@ 0x64
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	3332      	adds	r3, #50	@ 0x32
 8002f16:	4a08      	ldr	r2, [pc, #32]	@ (8002f38 <UART_SetConfig+0x2d4>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	f003 0207 	and.w	r2, r3, #7
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4422      	add	r2, r4
 8002f2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f2c:	e106      	b.n	800313c <UART_SetConfig+0x4d8>
 8002f2e:	bf00      	nop
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f4e:	4642      	mov	r2, r8
 8002f50:	464b      	mov	r3, r9
 8002f52:	1891      	adds	r1, r2, r2
 8002f54:	6239      	str	r1, [r7, #32]
 8002f56:	415b      	adcs	r3, r3
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f5e:	4641      	mov	r1, r8
 8002f60:	1854      	adds	r4, r2, r1
 8002f62:	4649      	mov	r1, r9
 8002f64:	eb43 0501 	adc.w	r5, r3, r1
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	00eb      	lsls	r3, r5, #3
 8002f72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f76:	00e2      	lsls	r2, r4, #3
 8002f78:	4614      	mov	r4, r2
 8002f7a:	461d      	mov	r5, r3
 8002f7c:	4643      	mov	r3, r8
 8002f7e:	18e3      	adds	r3, r4, r3
 8002f80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f84:	464b      	mov	r3, r9
 8002f86:	eb45 0303 	adc.w	r3, r5, r3
 8002f8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002faa:	4629      	mov	r1, r5
 8002fac:	008b      	lsls	r3, r1, #2
 8002fae:	4621      	mov	r1, r4
 8002fb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	008a      	lsls	r2, r1, #2
 8002fb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fbc:	f7fd f916 	bl	80001ec <__aeabi_uldivmod>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4b60      	ldr	r3, [pc, #384]	@ (8003148 <UART_SetConfig+0x4e4>)
 8002fc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002fca:	095b      	lsrs	r3, r3, #5
 8002fcc:	011c      	lsls	r4, r3, #4
 8002fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	1891      	adds	r1, r2, r2
 8002fe6:	61b9      	str	r1, [r7, #24]
 8002fe8:	415b      	adcs	r3, r3
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	1851      	adds	r1, r2, r1
 8002ff4:	6139      	str	r1, [r7, #16]
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	414b      	adcs	r3, r1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003008:	4659      	mov	r1, fp
 800300a:	00cb      	lsls	r3, r1, #3
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003012:	4651      	mov	r1, sl
 8003014:	00ca      	lsls	r2, r1, #3
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	4603      	mov	r3, r0
 800301c:	4642      	mov	r2, r8
 800301e:	189b      	adds	r3, r3, r2
 8003020:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003024:	464b      	mov	r3, r9
 8003026:	460a      	mov	r2, r1
 8003028:	eb42 0303 	adc.w	r3, r2, r3
 800302c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800303a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003048:	4649      	mov	r1, r9
 800304a:	008b      	lsls	r3, r1, #2
 800304c:	4641      	mov	r1, r8
 800304e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003052:	4641      	mov	r1, r8
 8003054:	008a      	lsls	r2, r1, #2
 8003056:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800305a:	f7fd f8c7 	bl	80001ec <__aeabi_uldivmod>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4611      	mov	r1, r2
 8003064:	4b38      	ldr	r3, [pc, #224]	@ (8003148 <UART_SetConfig+0x4e4>)
 8003066:	fba3 2301 	umull	r2, r3, r3, r1
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2264      	movs	r2, #100	@ 0x64
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	1acb      	subs	r3, r1, r3
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	3332      	adds	r3, #50	@ 0x32
 8003078:	4a33      	ldr	r2, [pc, #204]	@ (8003148 <UART_SetConfig+0x4e4>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003084:	441c      	add	r4, r3
 8003086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800308a:	2200      	movs	r2, #0
 800308c:	673b      	str	r3, [r7, #112]	@ 0x70
 800308e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003090:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	1891      	adds	r1, r2, r2
 800309a:	60b9      	str	r1, [r7, #8]
 800309c:	415b      	adcs	r3, r3
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a4:	4641      	mov	r1, r8
 80030a6:	1851      	adds	r1, r2, r1
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	4649      	mov	r1, r9
 80030ac:	414b      	adcs	r3, r1
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030bc:	4659      	mov	r1, fp
 80030be:	00cb      	lsls	r3, r1, #3
 80030c0:	4651      	mov	r1, sl
 80030c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c6:	4651      	mov	r1, sl
 80030c8:	00ca      	lsls	r2, r1, #3
 80030ca:	4610      	mov	r0, r2
 80030cc:	4619      	mov	r1, r3
 80030ce:	4603      	mov	r3, r0
 80030d0:	4642      	mov	r2, r8
 80030d2:	189b      	adds	r3, r3, r2
 80030d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030d6:	464b      	mov	r3, r9
 80030d8:	460a      	mov	r2, r1
 80030da:	eb42 0303 	adc.w	r3, r2, r3
 80030de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80030ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030f8:	4649      	mov	r1, r9
 80030fa:	008b      	lsls	r3, r1, #2
 80030fc:	4641      	mov	r1, r8
 80030fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003102:	4641      	mov	r1, r8
 8003104:	008a      	lsls	r2, r1, #2
 8003106:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800310a:	f7fd f86f 	bl	80001ec <__aeabi_uldivmod>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4b0d      	ldr	r3, [pc, #52]	@ (8003148 <UART_SetConfig+0x4e4>)
 8003114:	fba3 1302 	umull	r1, r3, r3, r2
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	2164      	movs	r1, #100	@ 0x64
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	3332      	adds	r3, #50	@ 0x32
 8003126:	4a08      	ldr	r2, [pc, #32]	@ (8003148 <UART_SetConfig+0x4e4>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	095b      	lsrs	r3, r3, #5
 800312e:	f003 020f 	and.w	r2, r3, #15
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4422      	add	r2, r4
 800313a:	609a      	str	r2, [r3, #8]
}
 800313c:	bf00      	nop
 800313e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003142:	46bd      	mov	sp, r7
 8003144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003148:	51eb851f 	.word	0x51eb851f

0800314c <memset>:
 800314c:	4402      	add	r2, r0
 800314e:	4603      	mov	r3, r0
 8003150:	4293      	cmp	r3, r2
 8003152:	d100      	bne.n	8003156 <memset+0xa>
 8003154:	4770      	bx	lr
 8003156:	f803 1b01 	strb.w	r1, [r3], #1
 800315a:	e7f9      	b.n	8003150 <memset+0x4>

0800315c <__libc_init_array>:
 800315c:	b570      	push	{r4, r5, r6, lr}
 800315e:	4d0d      	ldr	r5, [pc, #52]	@ (8003194 <__libc_init_array+0x38>)
 8003160:	4c0d      	ldr	r4, [pc, #52]	@ (8003198 <__libc_init_array+0x3c>)
 8003162:	1b64      	subs	r4, r4, r5
 8003164:	10a4      	asrs	r4, r4, #2
 8003166:	2600      	movs	r6, #0
 8003168:	42a6      	cmp	r6, r4
 800316a:	d109      	bne.n	8003180 <__libc_init_array+0x24>
 800316c:	4d0b      	ldr	r5, [pc, #44]	@ (800319c <__libc_init_array+0x40>)
 800316e:	4c0c      	ldr	r4, [pc, #48]	@ (80031a0 <__libc_init_array+0x44>)
 8003170:	f000 f818 	bl	80031a4 <_init>
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	2600      	movs	r6, #0
 800317a:	42a6      	cmp	r6, r4
 800317c:	d105      	bne.n	800318a <__libc_init_array+0x2e>
 800317e:	bd70      	pop	{r4, r5, r6, pc}
 8003180:	f855 3b04 	ldr.w	r3, [r5], #4
 8003184:	4798      	blx	r3
 8003186:	3601      	adds	r6, #1
 8003188:	e7ee      	b.n	8003168 <__libc_init_array+0xc>
 800318a:	f855 3b04 	ldr.w	r3, [r5], #4
 800318e:	4798      	blx	r3
 8003190:	3601      	adds	r6, #1
 8003192:	e7f2      	b.n	800317a <__libc_init_array+0x1e>
 8003194:	080031dc 	.word	0x080031dc
 8003198:	080031dc 	.word	0x080031dc
 800319c:	080031dc 	.word	0x080031dc
 80031a0:	080031e0 	.word	0x080031e0

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
